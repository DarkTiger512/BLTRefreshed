using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using BannerlordTwitch.Util;
using TaleWorlds.Library;
using YamlDotNet.Serialization;

namespace BannerlordTwitch.Rewards
{
    public class DescAttribute : Attribute
    {
        public string Desc;

        public DescAttribute(string desc)
        {
            this.Desc = desc;
        }
    }
    
    public static class RewardManager
    {
        private static readonly Dictionary<string, IAction> actions = new();
        private static readonly Dictionary<string, ICommandHandler> commands = new();
        
        public static void Init()
        {
            RegisterAll(typeof(RewardManager).Assembly);
        }

        public static void RegisterAll(Assembly assembly)
        {
            var redemptionActionTypes = assembly
                .GetTypes()
                .Where(t => typeof(IAction).IsAssignableFrom(t) && !t.IsAbstract);
            foreach (var redemptionActionType in redemptionActionTypes)
            {
                RegisterAction((IAction) Activator.CreateInstance(redemptionActionType));
            }

            var botCommands = assembly
                .GetTypes()
                .Where(t => typeof(ICommandHandler).IsAssignableFrom(t) && !t.IsAbstract);
            foreach (var botCommandType in botCommands)
            {
                RegisterCommand((ICommandHandler) Activator.CreateInstance(botCommandType));
            }
        }

        public static bool RegisterAction(IAction action)
        {
            var id = action.GetType().Name;
            if (actions.ContainsKey(id))
            {
                Log.Error($"Reward Action {id} already registered, please choose another name");
                return false;
            }
            Log.Trace($"Registered Reward Action {id}");
            actions.Add(id, action);
            return true;
        }
        
        public static bool RegisterCommand(ICommandHandler command)
        {
            var id = command.GetType().Name;
            if (commands.ContainsKey(id))
            {
                Log.Error($"Bot Command {id} already registered, please choose another name");
                return false;
            }
            Log.Trace($"Registered Bot Command {id}");
            commands.Add(id, command);
            return true;
        }

        public static object FindGlobalConfig(string id) => BLTModule.TwitchService.FindGlobalConfig(id);

        internal static void GenerateDocumentation()
        {
            var docs = new List<string>
            {
                "<!DOCTYPE html><html>",
                "<head>",
                "<link rel=\"stylesheet\" href=\"Bannerlord-Twitch-Documentation.css\">",
                "</head>",
                "<body>",
                "<div class=\"content\">",
                "<h1>Bannerlord-Twitch Module Documentation</h1>",
                "<p>This is autogenerated from the active BLT modules.</p>"
            };

            var documentedTypes = new List<Type>();
            docs.Add($"<h2>Reward</h2>");
            DocumentType(docs, typeof(Reward), documentedTypes);
            docs.Add($"<h3>Reward Actions (each is documented fully further down)</h3>");
            HtmlTable(docs, 
                new []{"Name", "Description"}, 
                actions.Values.Select(v => new []
                {
                    LinkToAnchor(v.GetType().Name, "Action"), 
                    DocStr(v.GetType()) ?? "(none)"
                }), "aclist");
            
            docs.Add($"<h2>Command</h2>");
            DocumentType(docs, typeof(Command), documentedTypes);
            docs.Add($"<h3>Command Handlers (each is documented fully further down)</h3>");
            HtmlTable(docs,
                new []{"Name", "Description"}, 
                commands.Values
                    .Select(v => new []
                    {
                        LinkToAnchor(v.GetType().Name, "Command"), 
                        DocStr(v.GetType()) ?? "(none)"
                    }), "aclist");

            foreach (var action in actions.Values)
            {
                docs.Add($"<h2>{MakeAnchor(action.GetType().Name, "Action")} Action Settings</h2>");
                DocumentActionOrCommand(docs, action.GetType(), action.ActionConfigType, documentedTypes);
            }
            foreach (var command in commands.Values)
            {
                docs.Add($"<h2>{MakeAnchor(command.GetType().Name, "Command")} Command Handler Settings</h2>");
                DocumentActionOrCommand(docs, command.GetType(), command.HandlerConfigType, documentedTypes);
            }
            
            docs.Add("</div></html></body>");
            try
            {
                string cssFileName = Path.Combine(Path.GetDirectoryName(typeof(Settings).Assembly.Location), "..", "..", 
                    "Bannerlord-Twitch-Documentation.css");
                File.Copy(cssFileName, Path.Combine(Common.PlatformFileHelper.DocumentsPath,
                    "Mount and Blade II Bannerlord", "Configs", "Bannerlord-Twitch-Documentation.css"), overwrite: true);
                File.WriteAllLines(Path.Combine(Common.PlatformFileHelper.DocumentsPath,
                        "Mount and Blade II Bannerlord", "Configs", "Bannerlord-Twitch-Documentation.html"),
                    docs.Select(s => s + "  "));
            }
            catch (Exception e)
            {
                Log.Error($"Couldn't write documentation: {e.Message}");
            }
        }

        private static void DocumentActionOrCommand(ICollection<string> docs, Type objectType, Type settingsType, List<Type> documentedTypes)
        {
            string docStr = DocStr(objectType);
            docs.Add(docStr != null 
                ? $"<p>{docStr}</p>" 
                : $"<p>No documentation provided.</p>");

            if (settingsType != null)
            {
                DocumentType(docs, settingsType, documentedTypes);
            }
        }

        private static string LinkToAnchor(string text, string anchorTag = null) 
            => $"<a href=\"#{text}{anchorTag ?? ""}\">{text}</a>";
        private static string MakeAnchor(string text, string anchorTag = null) 
            => $"<a name=\"{text}{anchorTag ?? ""}\">{text}</a>";
        
        private static string DocStr(MemberInfo objectType) => (objectType.GetCustomAttributes(typeof(DescAttribute)).FirstOrDefault() as DescAttribute)?.Desc;

        private static void DocumentType(ICollection<string> docs, Type typeToDocument, List<Type> documentedTypes)
        {
            documentedTypes.Add(typeToDocument);

            string docStr = DocStr(typeToDocument);
            if (docStr != null)
            {
                docs.Add($"<p>{docStr}</p>");
            }

            static string GetSimpleTypeName(Type t)
            {
                switch (Type.GetTypeCode(t))
                {
                    case TypeCode.String: return "string";
                    case TypeCode.Boolean: return "bool";
                    case TypeCode.Byte:
                    case TypeCode.Char:
                    case TypeCode.SByte:
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.Int32:
                    case TypeCode.UInt32:
                    case TypeCode.Int64:
                    case TypeCode.UInt64: return "int";
                    case TypeCode.Single:
                    case TypeCode.Double:
                    case TypeCode.Decimal: return "float";
                    default: return t.Name;
                }
            }

            static string GetFieldTypeName(FieldInfo f)
            {
                return Nullable.GetUnderlyingType(f.FieldType) != null
                    ? GetSimpleTypeName(Nullable.GetUnderlyingType(f.FieldType)) + " (optional)"
                    : GetSimpleTypeName(f.FieldType);
            }

            object settingsDefaults = Activator.CreateInstance(typeToDocument);

            var documentedFieldTypes = settingsDefaults.GetType()
                .GetFields()
                .Select(fi => fi.FieldType.IsArray ? fi.FieldType.GetElementType() : fi.FieldType)
                .Where(fi => fi?.GetCustomAttributes(typeof(DescAttribute)).Any() ?? false);
            
            HtmlTable(docs, new []
                {
                    "Name", "Type", "Default Value", "Description"
                }, 
                settingsDefaults.GetType().GetFields()
                    .Select(f => new[] {
                        f.Name,
                        $"<code>{(documentedFieldTypes.Contains(f.FieldType) ? LinkToAnchor(f.Name) : GetFieldTypeName(f))}</code>",
                        f.FieldType.IsPrimitive ? $"<code>{f.GetValue(settingsDefaults)}</code>" : "(none)",
                        DocStr(f) ?? "(none)"
                    }));

            docs.Add("<h3>Example:</h3>");
            docs.Add("<code class=\"example\">");
            docs.Add(new SerializerBuilder().Build().Serialize(settingsDefaults).Replace("\n", "<br>"));
            docs.Add("</code>");

            foreach (var sft in documentedFieldTypes.Where(t => !documentedTypes.Contains(t)))
            {
                if (!documentedTypes.Contains(sft))
                {
                    docs.Add($"<h2>{MakeAnchor(sft.Name)} Subtype</h2>");
                    DocumentType(docs, sft, documentedTypes);
                }
            }
        }

        private static void HtmlTable(ICollection<string> docs, IEnumerable<string> headers, IEnumerable<IEnumerable<string>> rows, string cssClass = null)
        {
            docs.Add(cssClass != null ? $"<table class=\"{cssClass}\">" : "<table>");

            docs.Add("<tr>");
            foreach (string header in headers)
            {
                docs.Add($"<th>{header}</th>");
            }
            docs.Add("</tr>");
            foreach (var row in rows)
            {
                docs.Add("<tr>");
                foreach (string cell in row)
                {
                    docs.Add($"<td>{cell}</td>");
                }
                docs.Add("</tr>");
            }
            docs.Add("</table>");
        }

        internal static object ConvertObject(object obj, Type type) =>
            new DeserializerBuilder().Build().Deserialize(
                new SerializerBuilder().Build().Serialize(obj),
                type);

        internal static void Command(string id, string args, CommandMessage commandMessage, object config)
        {
            if (commands.TryGetValue(id, out var cmdHandler))
            {
                try
                {
                    if (cmdHandler.HandlerConfigType != null)
                    {
                        config = ConvertObject(config, cmdHandler.HandlerConfigType);
                    }

                    cmdHandler.Execute(args, commandMessage, config);
                }
                catch (Exception e)
                {
                    Log.ScreenCritical($"Command {id} failed with exception {e.Message}, game might be unstable now!");
                    Log.Error(e.ToString());
                }
            }
            else
            {
                Log.ScreenFail($"Command with id {id} couldn't be found, check Commands config");
            }
        }

        internal static bool Enqueue(string actionId, Guid redemptionId, string message, string userName, object config)
        {
            if (!actions.TryGetValue(actionId, out var action))
            {
                Log.Error($"Action with the id {actionId} doesn't exist");
                return false;
            }

            var st = new Stopwatch();
            st.Start();
            try
            {
                if (action.ActionConfigType != null)
                {
                    config = ConvertObject(config, action.ActionConfigType);
                }
                
                action.Enqueue(redemptionId, message, userName, config);
            }
            catch (Exception e)
            {
                Log.ScreenCritical($"Action {actionId} failed with exception {e.Message}, game might be unstable now!");
                Log.Error(e.ToString());
                NotifyCancelled(redemptionId, $"Error occurred while trying to process the redemption");
            }

            if (st.ElapsedMilliseconds > 5)
            {
                Log.Info($"Action {actionId} took {st.ElapsedMilliseconds}ms to Enqueue, this is too slow!");
            }

            return true;
        }

        public static void NotifyComplete(Guid id, string status = null)
        {
            BLTModule.TwitchService.RedemptionComplete(id, status);
        }
        
        public static void NotifyCancelled(Guid id, string reason = null)
        {
            BLTModule.TwitchService.RedemptionCancelled(id, reason);
        }

        public static void SendChat(params string[] messages)
        {
            BLTModule.TwitchService.SendChat(messages);
        }
        
        public static void SendReply(string replyId, params string[] messages)
        {
            BLTModule.TwitchService.SendReply(replyId, messages);
        }
    }
}