using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using BannerlordTwitch.Util;
using TaleWorlds.Library;
using YamlDotNet.Serialization;

namespace BannerlordTwitch.Rewards
{
    public class DescAttribute : Attribute
    {
        public string Desc;

        public DescAttribute(string desc)
        {
            this.Desc = desc;
        }
    }
    
    public static class RewardManager
    {
        private static readonly Dictionary<string, IAction> actions = new();
        private static readonly Dictionary<string, ICommandHandler> commands = new();
        
        public static void Init()
        {
            RegisterAll(typeof(RewardManager).Assembly);
        }

        public static void RegisterAll(Assembly assembly)
        {
            var redemptionActionTypes = assembly
                .GetTypes()
                .Where(t => typeof(IAction).IsAssignableFrom(t) && !t.IsAbstract);
            foreach (var redemptionActionType in redemptionActionTypes)
            {
                RegisterAction((IAction) Activator.CreateInstance(redemptionActionType));
            }

            var botCommands = assembly
                .GetTypes()
                .Where(t => typeof(ICommandHandler).IsAssignableFrom(t) && !t.IsAbstract);
            foreach (var botCommandType in botCommands)
            {
                RegisterCommand((ICommandHandler) Activator.CreateInstance(botCommandType));
            }
        }

        public static bool RegisterAction(IAction action)
        {
            var id = action.GetType().Name;
            if (actions.ContainsKey(id))
            {
                Log.Error($"Reward Action {id} already registered, please choose another name");
                return false;
            }
            Log.Trace($"Registered Reward Action {id}");
            actions.Add(id, action);
            return true;
        }
        
        public static bool RegisterCommand(ICommandHandler command)
        {
            var id = command.GetType().Name;
            if (commands.ContainsKey(id))
            {
                Log.Error($"Bot Command {id} already registered, please choose another name");
                return false;
            }
            Log.Trace($"Registered Bot Command {id}");
            commands.Add(id, command);
            return true;
        }

        public static object FindGlobalConfig(string id) => BLTModule.TwitchService.FindGlobalConfig(id);

        internal static void GenerateDocumentation()
        {
            var docs = new List<string>
            {
                "<!DOCTYPE html><html>",
                @"<head>
                <style>
table {
width:80%;
margin-left: 5%;
margin-right: 15%;
}
table, th, td {
border: 1px solid black;
border-collapse: collapse;
font-family: verdana;
}
th, td {
padding: 4px 10px;
text-align: left;
}
table td:nth-child(1) {
width: 20%;
}
table td:nth-child(2) {
width: 10%;
}
table td:nth-child(3) {
width: 15%;
}
table td:nth-child(4) {
width: 40%;
}
table tr:nth-child(even) {
background-color: #ddd;
}
table tr:nth-child(odd) {
background-color: #fff;
}
table th {
background-color: black;
color: white;
}
h1, h2, h3, p {
font-family: verdana;
}
.example {
    background: #f4f4f4;
    border: 1px solid #ddd;
    border-left: 3px solid #f36d33;
    color: #666;
    page-break-inside: avoid;
    font-family: monospace;
    font-size: 15px;
    line-height: 1.6;
    margin-bottom: 1.6em;
    max-width: 100%;
    overflow: auto;
    padding: 1em 1.5em;
    display: block;
    word-wrap: break-word;
}
                </style>
                </head>",
                "<body>",
                "<h1>Bannerlord-Twitch Module Documentation</h1>",
                "<p>This is autogenerated from the active BLT modules.</p>"
            };

            var documentedTypes = new List<Type>();
            DocumentType(docs, typeof(Reward), documentedTypes, showTitle: true);
            DocumentType(docs, typeof(Command), documentedTypes, showTitle: true);
            foreach (var action in actions.Values)
            {
                DocumentActionOrCommand(docs, action.GetType(), action.ActionConfigType, documentedTypes);
            }
            foreach (var command in commands.Values)
            {
                DocumentActionOrCommand(docs, command.GetType(), command.HandlerConfigType, documentedTypes);
            }
            
            docs.Add("</html></body>");
            File.WriteAllLines(Path.Combine(Common.PlatformFileHelper.DocumentsPath,
                "Mount and Blade II Bannerlord", "Configs", "Bannerlord-Twitch-Documentation.html"), docs.Select(s => s + "  "));
        }

        private static void DocumentActionOrCommand(ICollection<string> docs, Type objectType, Type settingsType, List<Type> documentedTypes)
        {
            docs.Add($"<h2>{objectType.Name} Settings</h2>");

            string docStr = (objectType.GetCustomAttributes(typeof(DescAttribute)).FirstOrDefault() as DescAttribute)?.Desc;
            if (docStr != null)
            {
                docs.Add($"<p>{docStr}</p>");
            }

            if (settingsType != null)
            {
                DocumentType(docs, settingsType, documentedTypes);
            }
        }

        private static void DocumentType(ICollection<string> docs, Type typeToDocument, List<Type> documentedTypes, bool showTitle = false)
        {
            documentedTypes.Add(typeToDocument);

            if (showTitle)
            {
                docs.Add($"<h2>{typeToDocument.Name}</h2>");
            }

            string docStr = (typeToDocument.GetCustomAttributes(typeof(DescAttribute)).FirstOrDefault() as DescAttribute)?.Desc;
            if (docStr != null)
            {
                docs.Add($"<p>{docStr}</p>");
            }

            static string GetSimpleTypeName(Type t)
            {
                switch (Type.GetTypeCode(t))
                {
                    case TypeCode.String: return "string";
                    case TypeCode.Boolean: return "bool";
                    case TypeCode.Byte:
                    case TypeCode.Char:
                    case TypeCode.SByte:
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                    case TypeCode.Int32:
                    case TypeCode.UInt32:
                    case TypeCode.Int64:
                    case TypeCode.UInt64: return "int";
                    case TypeCode.Single:
                    case TypeCode.Double:
                    case TypeCode.Decimal: return "float";
                    default: return t.Name;
                }
            }

            static string GetFieldTypeName(FieldInfo f)
            {
                return Nullable.GetUnderlyingType(f.FieldType) != null
                    ? GetSimpleTypeName(Nullable.GetUnderlyingType(f.FieldType)) + " (optional)"
                    : GetSimpleTypeName(f.FieldType);
            }

            object settingsDefaults = Activator.CreateInstance(typeToDocument);
            var flatFields = settingsDefaults.GetType().GetFields()
                .Select(f => (
                    name: f.Name,
                    type: GetFieldTypeName(f),
                    def: f.FieldType.IsPrimitive ? f.GetValue(settingsDefaults).ToString() : "(none)",
                    desc: (f.GetCustomAttributes(typeof(DescAttribute)).FirstOrDefault() as DescAttribute)?.Desc
                ))
                .ToList();

            docs.Add("<table>");
            docs.Add("<tr><th>Name</th><th>Type</th><th>Default</th><th>Description</th></tr>");
            foreach ((string name, string type, string def, string desc) in flatFields)
            {
                docs.Add("<tr>");
                docs.Add($"<td><code>{name}</code></td>");
                docs.Add($"<td><code>{type}</code></td>");
                docs.Add($"<td>{def}</td>");
                docs.Add(desc != null
                    ? $"<td>{desc}</td>"
                    : $"<td>-</td>");
                docs.Add("</tr>");
            }
            docs.Add("</table>");
            
            docs.Add("<h3>Example:</h3>");
            docs.Add("<code class=\"example\">");
            docs.Add(new SerializerBuilder().Build().Serialize(settingsDefaults).Replace("\n", "<br>"));
            docs.Add("</code>");

            foreach (var sft in settingsDefaults.GetType()
                .GetFields()
                .Select(fi => fi.FieldType.IsArray ? fi.FieldType.GetElementType() : fi.FieldType)
                .Where(fi => fi?.GetCustomAttributes(typeof(DescAttribute)).Any() ?? false)
                .Where(t => !documentedTypes.Contains(t))
            )
            {
                if (!documentedTypes.Contains(sft))
                    DocumentType(docs, sft, documentedTypes, showTitle: true);
            }
        }

        internal static object ConvertObject(object obj, Type type) =>
            new DeserializerBuilder().Build().Deserialize(
                new SerializerBuilder().Build().Serialize(obj),
                type);

        internal static void Command(string id, string args, CommandMessage commandMessage, object config)
        {
            if (commands.TryGetValue(id, out var cmdHandler))
            {
                try
                {
                    if (cmdHandler.HandlerConfigType != null)
                    {
                        config = ConvertObject(config, cmdHandler.HandlerConfigType);
                    }

                    cmdHandler.Execute(args, commandMessage, config);
                }
                catch (Exception e)
                {
                    Log.ScreenCritical($"Command {id} failed with exception {e.Message}, game might be unstable now!");
                    Log.Error(e.ToString());
                }
            }
            else
            {
                Log.ScreenFail($"Command with id {id} couldn't be found, check Commands config");
            }
        }

        internal static bool Enqueue(string actionId, Guid redemptionId, string message, string userName, object config)
        {
            if (!actions.TryGetValue(actionId, out var action))
            {
                Log.Error($"Action with the id {actionId} doesn't exist");
                return false;
            }

            var st = new Stopwatch();
            st.Start();
            try
            {
                if (action.ActionConfigType != null)
                {
                    config = ConvertObject(config, action.ActionConfigType);
                }
                
                action.Enqueue(redemptionId, message, userName, config);
            }
            catch (Exception e)
            {
                Log.ScreenCritical($"Action {actionId} failed with exception {e.Message}, game might be unstable now!");
                Log.Error(e.ToString());
                NotifyCancelled(redemptionId, $"Error occurred while trying to process the redemption");
            }

            if (st.ElapsedMilliseconds > 5)
            {
                Log.Info($"Action {actionId} took {st.ElapsedMilliseconds}ms to Enqueue, this is too slow!");
            }

            return true;
        }

        public static void NotifyComplete(Guid id, string status = null)
        {
            BLTModule.TwitchService.RedemptionComplete(id, status);
        }
        
        public static void NotifyCancelled(Guid id, string reason = null)
        {
            BLTModule.TwitchService.RedemptionCancelled(id, reason);
        }

        public static void SendChat(params string[] messages)
        {
            BLTModule.TwitchService.SendChat(messages);
        }
        
        public static void SendReply(string replyId, params string[] messages)
        {
            BLTModule.TwitchService.SendReply(replyId, messages);
        }
    }
}